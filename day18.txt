#오름차순, 내림차순 정렬

#select * from noticeBoard order by num;
 > noticeBoard라는 테이블에 num이라는 컬럼을 기준으로 오름차순 정렬해서 select하겠다.
#select * from noticeBoard order by num desc;
 > 내림차순으로 정렬해서 select

# 프로그래머가 프로그램에서 여태까지 저장된 게시글 번호가 마지막이 무엇인지 알아내서 insert 쿼리로 게시글을 저장을 시도하게 만들어 놓았을 때의 문제점
게시글 작성요청이 동시에 2개가 들어오면 게시글 번호가 잘못될 수 있음..
마지막 게시글이 몇번인지 알아내기 위한 쿼리가 필요하다는 것이 문제

# 테이블에 값이 자동으로 넘버링되는 기능이 필요함.

#오토 인크리먼트 : 자동으로 컬럼의 값을 1부터 순차적으로 저장하는 기능.

# 테이블을 만들 때 특정 컬럼에 auto_increment 기능을 활성화하면 그 컬럼에 값은 자동으로 넘버링 됨.

#auto_increment 설정 된 컬럼은 insert로 값을 삽입할 때 값을 넣으면 안되고 null이라고 해줌.
	>>> not null 지정해줘도 null이라고 적으면 실제로 저장될 때는 auto_increment저장되서 들어가므로 		not null 처리 안됨.

# 기본적으로 AI 설정을 했을 때 중간에 행이 삭제되어도 insert 시킬 때 비어있는 번호를 채우지 않음.

# auto_increment 재 정렬 하는 방법(중간 행 삭제 되었을 때 다시 재 정렬해서 행을 채움.)
	1. set @COUNT = 0;	>>> RAM에서 메모리 공간을 할당하는데(변수를 지정한다라고 함.), 그 공간					의 이름을 COUNT라고 칭하고 값을 0을 저장함.
	2. update NB set n = @COUNT := @COUNT+1;
		NB라는 테이블의 모든 행에 있는 n컬럼의 값을 변수 COUNT값 +1 해준 값으로 변경하겠다..
	3. alter table NB auto_increment = 1;
		NB라는 테이블에 자동 넘버링 하는 수를 1부터 다시 측정하라는 쿼리.

# auto_increment를 재정렬하는 3개의 쿼리를 한대 묶음화를 해놓고 편하게 호출해서 쓰게 만들 수 있음.(Stored Procedures)
# 근데 더 편하게 하려고 트리거를 만들어서 행이 삭제되면 자동으로 MySQL에서 프로시저를 호출하게 만들려고 시도해봤지만, 트리거를 통해서 넘버링을 다시 시킬수는 없다는 것을 확인.

트리거를 통해서 동일한 테이블을 대상으로 update 쿼리를 사용할 수 없기 때문.

select last_name, emp_no from employees where emp_no < 50000;
emp_no 컬럼에 값이 50000 미만인 것만 매칭하는 조건.

#MySQL 비교 연산자 : <,>,<=,>=,!=,=

#클라우드에 있는 sqlDB.excel 파일을 참조해서 sqlDB라는 이름에 DB를 생성하고,
 그 DB안에 테이블 2개를 엑셀 파일을 참조해서 생성.
 진행할 때 쿼리만을 써서 GUI를 사용하지 말고 진행해야 함.