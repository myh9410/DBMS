

# Workbench 기능으로 SQL Editer에서 작성한 쿼리들을 파일로 저장해 놨다가 언제든지 필요하면 그 파일을 불러와서 작성되어 있는 쿼리를 전송시킬 수 있음.
이 기능을 사용해서 자주 사용하는 쿼리들이 있을 때 파일로 저장해 놓고 불러와서 사용하게 됨.

#데이터베이스 테이블에 고객정보를 저장하다 보면 저장하는 값 중에 고객의 소중한 개인정보가 저장됨.

#개인정보보호관리사(CPPG)

#만약 단순업무 처리해야될 상황이 발생했는데, 그 단순업무가 데이터베이스에 저장된 값을 보면서 해야하는 업무임..

#고액의 연봉을 받는 DBA가 단순업무를 처리하기에는 부적절하기 때문에 기업에서는 아르바이트를 고용함.
만약 정보가 유출되면 엄청난 피해를 가지고 온다.

#이런 상황이 발생되면, DBA는 실제 테이블에 가상의 테이블을 만들게 됨...그 가상의 테이블을 
MySQL에서는 뷰어(Viewer)라고 함.

#뷰어 : 실제 테이블에 존재하는 컬럼 중에 지정한 컬럼만 보이게 만들어 놓은 테이블을 뷰어라고 함..

#뷰어를 통해 고객의 소중한 개인정보는 안보이는 뷰어를 만들어서 아르바이트 생한테 작업을 맡기게 됨.

#create view uv_memberTBL as select memberName, memberAddress from memberTBL;
위의 쿼리는 memberTBL에 뷰어를 uv_memberTBL로 만드는 데, 그 뷰어에서 memberName, memberAddress라는 두개의 컬럼만 보이는 뷰어로 만들겠다.

#show tables; --> 다음 쿼리를 통해 테이블도 뷰어도 만들어져 있는지 확인할 수 있음..

#뷰어를 만든다고 해서 테이블에 데이터를 복사시켜내는게 아님.. 뷰어는 실제 테이블에 있는 데이터를 연결시켜 보여주기만 하는 것.	단, 뷰어는 보여주는 것에 대한 컬럼을 제한한 것임.

#뷰어를 사용하는 2번째 목적
여러 테이블을 select 쿼리를 통해 하나의 결과로 합쳐서 조회하는 경우가 빈번하게 발생할 때 뷰어를 통해 여러 테이블이 합쳐져 보이는 뷰어를 만들어 놓고 사용한다면 보다 편하게 작업할 수 있음.

#뷰어로 위와같이 만들어 놓으면, 이해가 부족한 개발자 or 관리자가 오해를 할 오지가 생길 수는 있음.
(그럼에도 불구하고 뷰어의 이점이 매우 뛰어나기 때문에 사용함.)

#drop view uv_memberTBL <-- uv_memberTBL이라는 뷰어를 삭제함.


#자주 사용하는 쿼리들을 파일로 저장해 놓고 필요할 때 마다 불러와서 쿼리를 사용할 수도 있겠지만, 그 파일을 다른 사람한테 보내주지 않는다면, 다른 사람들은 그 쿼리들을 사용할 수는 없을 것.

#만약 여러 DBA와 프로그래머가 다같이 서로서로 자주 사용하는 쿼리들을 묶어놓고 쉽게 사용할 수 있게 스토어드 프로시저라는 것을 만들 수 있음.

#Stored Procedure(스토어드 프로시져) : 여러 SQL들을 한대 묶음화할 수 있는 MySQL의 기능,
자주 사용하는 쿼리 묶음들이 있을 때는 스토어드 프로시저를 통해 묶어 놓으면 그 묶음들을 쉽게 쿼리를 전송할 수 있게 됨.

#Stored Procedure는 MySQL에 만들어 두게 되면, 모든 MySQL을 사용하는 사용자들이 전부 사용할 수 있게 됨.

#delimiter : 구획
	delimiter는 구분자를 지정하는 키워드
	ex) select * from memberTBL;
	쿼리를 사용할 때 쿼리의 마지막 부분에 ; 세미콜론을 붙임.
	; 세미콜론은 여기까지가 쿼리의 끝임을 의미함.

# ;을 구분자로써 사용함.

# delimiter // <-- 구분자를 잠시 //로 변경하겠다.
#delimiter ;   <-- 구분자를 원래 구분자인 ;으로 변경.


delimiter //
create procedure myProc()
begin
	select * from memberTBL where memberName = "당탕이";
    	select * from memberTBL where memberName = "정말로";
end //
delimiter ;



#스토어드 프로시저는 보통 select 쿼리를 묶는 용도로 사용하지 않음.

ex) A라는 테이블에 있는 데이터를 조회해서 나이가 미성년자인 행을 삭제를 처리하고, 삭제를 하기 전에 다른 테이블로 복사를 진행하는 쿼리 등...

#MySQL 운영할 때 매일같이 사용하는 작업,
일주일에 한번하

#스토어드 프로시저는 데이터베이스 별로 만들어지는 것.

#만약 프로시저를 shopDB라는 데이터베이스에 만들었다면, 반드시 그걸 사용하기 위해서는 shopDB가 use된 상태에서 사용해야 함.

#drop procedure myProc;	<-- myProc이라는 procedure 삭제

#블럭씌우고 Ctrl+Enter ---> 블럭 씌운 쿼리만 실행.


# 스토어드 프로시저를 use를 안하고 쓰게 만들기	>>>>>>>>>>>>>	불가능!!!!!!!
	절대로 스토어드 프로시저는 use를 다른 데이터베이스를 해놓으면 사용할 수 없음.
# use로 다른 DB가 선택되어 있어도 사용할 수 있게 만들기

#SCHEMAS에 Stored Procedures에서 마우스 우클릭으로  Stored Procedures를 만들 수 있음.
이렇게 만들면 Workbench에서 delimiter 알아서 바꿔줌.(##으로 바꿈)

#함수 : 여러개를 묶음화 하는데 매개변수도 받을 수 있고 리턴값을 전달할 수도 있음

#스토어드 프로시져 : 단순히 여러개를 묶음화할 수만 있음.<<<프로그래밍에 없는 개념.


# 삽입 : insert 쿼리

insert into memberTBL values(
	"You",
	"유인나",
	"부산시 부산구 부산동"
);
>> 위의 쿼리는 memberTBL이라는 테이블에 지정한 값으로 데이터를 삽입하는 쿼리임.(데이터 추가)
>> 위 쿼리를 통해 데이터를 삽입할 때 소괄호에 컬럼 순서에 맞게 데이터를 작성해야 함...
	"You"			--> memberID
	"유인나"		-->memberName
	"부산시 부산구 부산동"	-->memberAddress
ex) 회원가입을 할 때 고객이 입력한 정보를 DB에 삽입.
ex) 코리아 학원에 수강생후기로 남긴 정보를 DB에 삽입.
ex) 게시글 작성한 내용을 DB에 삽입 등 


# 수정 : 
# 조회 : select 쿼리
# 삭제 : drop 쿼리













